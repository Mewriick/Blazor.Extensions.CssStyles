/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(1);
var LogObject_1 = __webpack_require__(2);
;
var Blazor = window["Blazor"];
function initialize() {
    "use strict";
    Blazor.registerFunction('Blazor.Extensions.Logging.BrowserConsoleLogger.Log', function (logObjectValue) {
        var logObjectString = Blazor.platform.toJavaScriptString(logObjectValue);
        var logObject = JSON.parse(logObjectString);
        if (!logObject) {
            console.error('Invalid logObject received: ', logObjectString ? logObjectString : '<null>');
            return;
        }
        var logMethod = console.log;
        // If we've a table, we'll print it as a table anyway, it is unlikely that the developer want to log errornous data as a table.
        if (logObject.Type == LogObject_1.LogObjectType.Table) {
            logMethod = console.table;
        }
        else {
            switch (logObject.LogLevel) {
                case LogObject_1.LogLevel.Trace:
                    logMethod = console.trace;
                    break;
                case LogObject_1.LogLevel.Debug:
                    logMethod = console.debug;
                    break;
                case LogObject_1.LogLevel.Warning:
                    logMethod = console.warn;
                    break;
                case LogObject_1.LogLevel.Error:
                case LogObject_1.LogLevel.Critical:
                    logMethod = console.error;
                    break;
            }
        }
        logMethod(logObject.Payload);
        if (logObject.Exception) {
            logMethod("Exception: ", logObject.Exception);
        }
    });
}
initialize();


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

if (typeof window !== 'undefined' && !window['BlazorExtensions']) {
    // When the library is loaded in a browser via a <script> element, make the
    // following APIs available in global scope for invocation from JS
    window['BlazorExtensions'] = {};
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// Enum coming from Microsoft.Extensions.Logging
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Trace"] = 0] = "Trace";
    LogLevel[LogLevel["Debug"] = 1] = "Debug";
    LogLevel[LogLevel["Information"] = 2] = "Information";
    LogLevel[LogLevel["Warning"] = 3] = "Warning";
    LogLevel[LogLevel["Error"] = 4] = "Error";
    LogLevel[LogLevel["Critical"] = 5] = "Critical";
    LogLevel[LogLevel["None"] = 6] = "None";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
var LogObjectType;
(function (LogObjectType) {
    LogObjectType[LogObjectType["String"] = 0] = "String";
    LogObjectType[LogObjectType["Object"] = 1] = "Object";
    LogObjectType[LogObjectType["Table"] = 2] = "Table";
})(LogObjectType = exports.LogObjectType || (exports.LogObjectType = {}));


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,